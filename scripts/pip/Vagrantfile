# frozen_string_literal: true

# -*- mode: ruby -*-
# vi: set ft=ruby :
##############################################################################
# Copyright (c) 2020
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

no_proxy = ENV["NO_PROXY"] || ENV["no_proxy"] || "127.0.0.1,localhost"
(1..254).each do |i|
  no_proxy += ",10.0.2.#{i}"
end
driver = ENV["PKG_DRIVER"] || "qemu"

distros = YAML.load_file("#{File.dirname(__FILE__)}/../../distros_supported.yml")

Vagrant.configure("2") do |config|
  config.vm.provider :libvirt
  config.vm.provider :virtualbox

  config.vm.synced_folder "./", "/vagrant"
  distros["linux"].each do |distro|
    config.vm.define distro["alias"] do |node|
      node.vm.box = distro["name"]
      node.vm.box_version = distro["version"] if distro.key? "version"
      node.vm.box_check_update = false
    end
  end

  vagrant_root = File.dirname(__FILE__)
  config.vm.provision "shell", path: "#{vagrant_root}/../../_requirements.sh"
  config.vm.provision "shell", path: "#{vagrant_root}/_requirements.sh" if File.exist?("#{File.dirname(__FILE__)}/_requirements.sh")
  config.vm.provision "shell", privileged: false do |sh|
    sh.env = {
      PKG_DEBUG: ENV["PKG_DEBUG"] || "true"
    }
    sh.inline = <<-SHELL
      set -o errexit
      set -o pipefail

      if [[ "${PKG_DEBUG:-false}" == "true" ]]; then
          set -o xtrace
      fi

      cd /vagrant
      PKG_PYTHON_MAJOR_VERSION=2 ./main.sh | tee ~/main.log 2>&1
      ./validate.sh | tee ~/validate.log

      # Python 3 installation
      ./main.sh | tee --append ~/main.log 2>&1
      ./validate.sh | tee --append ~/validate.log
      echo "Tests completed!!!"
    SHELL
  end

  host = RbConfig::CONFIG["host_os"]

  case host
  when /darwin/
    mem = `sysctl -n hw.memsize`.to_i / 1024
  when /linux/
    mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i
  when /mswin|mingw|cygwin/
    mem = `wmic computersystem Get TotalPhysicalMemory`.split[1].to_i / 1024
  end
  %i[virtualbox libvirt].each do |provider|
    config.vm.provider provider do |p|
      p.cpus = 1
      p.memory = ENV["MEMORY"] || (mem / 1024 / 4)
    end
  end

  config.vm.provider "virtualbox" do |v|
    v.gui = false
    v.customize ["modifyvm", :id, "--nictype1", "virtio", "--cableconnected1", "on"]
    # https://bugs.launchpad.net/cloud-images/+bug/1829625/comments/2
    v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
    v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    # Enable nested paging for memory management in hardware
    v.customize ["modifyvm", :id, "--nestedpaging", "on"]
    # Use large pages to reduce Translation Lookaside Buffers usage
    v.customize ["modifyvm", :id, "--largepages", "on"]
    # Use virtual processor identifiers  to accelerate context switching
    v.customize ["modifyvm", :id, "--vtxvpid", "on"]
  end

  config.vm.provider :libvirt do |v|
    v.random_hostname = true
    v.management_network_address = "10.0.2.0/24"
    v.management_network_name = "administration"
    v.driver = driver
  end

  if !ENV["http_proxy"].nil? && !ENV["https_proxy"].nil? && Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http = ENV["http_proxy"] || ENV["HTTP_PROXY"] || ""
    config.proxy.https    = ENV["https_proxy"] || ENV["HTTPS_PROXY"] || ""
    config.proxy.no_proxy = no_proxy
    config.proxy.enabled = { docker: false, git: false }
  end
end
